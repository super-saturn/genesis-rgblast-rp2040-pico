.program flash_adc
.origin 0
; must be loaded at 0 because the ADC in acts as jmp instructions
; intended to be used by multiple state machines as a 3in-2bits out flash ADC

.wrap_target
readzero:
jmp zeroout     ; 0 0 0
jmp oneout      ; 0 0 1
jmp twoout             ; 0 1 0 
jmp twoout      ; 0 1 1
jmp threeout             ; 1 0 0
jmp threeout             ; 1 0 1
jmp threeout             ; 1 1 0
jmp threeout    ; 1 1 1

zeroout:
set pins 0
jmp loopback
oneout:
set pins 1
jmp loopback
twoout:
set pins 2
jmp loopback
threeout:
set pins 3
jmp loopback
undefined:
set pins 0
loopback:
in null 32
in pins 3
mov pc isr
.wrap

 
%c-sdk {
    static inline void flash_adc_program_init(PIO pio, uint sm, uint offset, uint sampleInPin, uint bitsOutPin) {
        pio_sm_config c = flash_adc_program_get_default_config(offset);

        sm_config_set_in_pins(&c, sampleInPin);
        sm_config_set_out_pins(&c, bitsOutPin, 2);
        sm_config_set_set_pins(&c, bitsOutPin, 2);

        pio_gpio_init(pio, bitsOutPin);
        pio_gpio_init(pio, bitsOutPin+1);

        pio_sm_set_consecutive_pindirs(pio, sm, bitsOutPin, 2, true);
        pio_sm_set_consecutive_pindirs(pio, sm, sampleInPin, 3, false);
        sm_config_set_in_shift(&c, false, false, 3);

        // Initialize and enable the state machine.
        pio_sm_init(pio, sm, offset, &c);
        pio_sm_set_enabled(pio, sm, true);
    }
%}